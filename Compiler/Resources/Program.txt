func test () as int => {
    ref arr = [5,6,3,2,1,7,5,2,9];		

	parallel_mergesort(arr);
    # selection_sort(arr);	
    # binary_search(arr, 5);
};

func parallel_mergesort (arr as array[int, var]) as void => {
	ref mid = arr.size / 2;
	ref part1 = arr@[:mid];
	ref part2 = arr@[mid:];

	region {
		async selection_sort(part1);
		selection_sort(part2);
	};
};

func binary_search (arr as array[int, ref], to_find as int) as int => {
    var mid = arr.size / 2;
    var mid_value = arr[mid];

    while mid_value != to_find do {
        if to_find < mid_value then {
            if mid == 0 do {
                return -1;
            };

            @mid = mid / 2;
        }
        else {
            if mid == arr.size - 1 do {
                return -1;
            };

            @mid = mid + (arr.size - mid) / 2;
        };

        @mid_value = arr[mid];
    };

    mid;
};

func selection_sort (arr as array[int, var]) as void => { 
    # Find the smallest element and put it in position i
    for i = 0 to arr.size-1 do {
        var smallest = arr[i];
        var smallest_index = i;

        # Find the smallest element
        for j = i + 1 to arr.size-1 do {
            if arr[j] < smallest do {
                @smallest_index = j;
                @smallest = arr[j];
            };
        };

        # Swap the smallest with the ith position
        ref swap = arr[i];

        arr@[i] = smallest;
        arr@[smallest_index] = swap;
    };
};