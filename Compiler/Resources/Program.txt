func test() as int => {
    ref arr = [5,6,3,2,1,7,5,2,9];		

	parallel_mergesort(arr);
    # selection_sort(arr);	
    # binary_search(arr, 5);
};



func parallel_mergesort(arr as array[int, var]) as void => {
	ref mid = arr.size / 2;
	ref part1 = arr@[:mid];
	ref part2 = arr@[mid:];

	region {
		async selection_sort(part1);
		selection_sort(part2);
	};
};

func binary_search(arr as array[int, ref], to_find as int) as int => {
    var start = 0;
	var slice = arr;
	
	while slice.size > 0 do {
		ref mid = slice.size / 2;
		ref mid_value = slice[mid];
		
		if to_find == mid_value then {
			return start + mid;
		}
		else if to_find < mid_value then {
			@slice = slice@[:mid];
		}
		else {
			@slice = slice@[mid:];
			@start = start + mid;
		};
	};
	
	-1;
};

func selection_sort(arr as array[int, var]) as void => { 
    # Find the smallest element and put it in position i
    for i = 0 to arr.size-1 do {
        var smallest = arr[i];
        var smallest_index = i;

        # Find the smallest element
        for j = i + 1 to arr.size-1 do {
            if arr[j] < smallest do {
                @smallest_index = j;
                @smallest = arr[j];
            };
        };

        # Swap the smallest with the ith position
        ref swap = arr[i];

        arr@[i] = smallest;
        arr@[smallest_index] = swap;
    };
};