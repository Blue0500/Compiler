#include "include/trophy.h"

typedef union UnionType_0 UnionType_0;

typedef struct $Token $Token;

typedef union UnionType_1 UnionType_1;

typedef struct $Result $Result;

typedef struct ArrayType0 ArrayType0;

typedef struct ArrayType1 ArrayType1;

union UnionType_0 {
    trophy_void eof;
    trophy_void plus;
    trophy_void minus;
    trophy_void multiply;
    trophy_void open_paren;
    trophy_void close_paren;
    trophy_int int_literal;
};

struct $Token {
    int tag;
    UnionType_0 data;
};

union UnionType_1 {
    trophy_void error;
    trophy_int success;
};

struct $Result {
    int tag;
    UnionType_1 data;
};

struct ArrayType0 {
    trophy_int size;
    trophy_int* data;
};

$Result $parse(void* env, ArrayType0 $input2);

struct ArrayType1 {
    trophy_int size;
    $Token* data;
};

ArrayType1 $chars_to_tokens(void* env, ArrayType0 $toks14);

$Token $char_to_token(void* env, trophy_int $c16);

$Result $add_expr(void* env, ArrayType1 $toks29, trophy_int* $pos30);

$Result $mult_expr(void* env, ArrayType1 $toks40, trophy_int* $pos41);

$Result $atom(void* env, ArrayType1 $toks54, trophy_int* $pos55);

$Result $parse(void* env, ArrayType0 $input2) {
    Region* heap = (Region*)env;

    // Definition of variable 'pos'
    trophy_int $pos1 = 0U;

    (&$pos1);
    return $add_expr(heap, $chars_to_tokens(heap, $input2), (&$pos1));
}

ArrayType1 $chars_to_tokens(void* env, ArrayType0 $toks14) {
    Region* heap = (Region*)env;

    // New array on region 'heap'
    ArrayType1 array_0;
    (array_0.data) = ($Token*)region_alloc(heap, ((($toks14.size) + 1U) * sizeof($Token)));
    (array_0.size) = (($toks14.size) + 1U);

    // Definition of variable 'result'
    ArrayType1 $result4 = array_0;

    (&$result4);
    // Definition of variable 'result_pos'
    trophy_int $result_pos5 = 0U;

    (&$result_pos5);
    // Definition of variable '$for_counter_6'
    trophy_int $$for_counter_68 = 0U;

    (&$$for_counter_68);
    // While loop
    while (1U) {
        if ((!($$for_counter_68 <= (($toks14.size) - 1U)))) { 
            break;
        } 

        // Definition of variable 'i'
        trophy_int $i10 = $$for_counter_68;

        (&$i10);
        // Array access bounds check
        if (HEDLEY_UNLIKELY((($i10 < 0U) | ($i10 >= ($toks14.size))))) { 
            region_panic(heap, "Panic! Expression \"$i10\" is outside the bounds of the array \"$toks14\"");
        } 

        // If statement
        trophy_void if_temp_0;
        if (((*(($toks14.data) + $i10)) != 32U)) { 
            // Array access bounds check
            if (HEDLEY_UNLIKELY((($result_pos5 < 0U) | ($result_pos5 >= ($result4.size))))) { 
                region_panic(heap, "Panic! Expression \"$result_pos5\" is outside the bounds of the array \"$result4\"");
            } 

            // Array access bounds check
            if (HEDLEY_UNLIKELY((($i10 < 0U) | ($i10 >= ($toks14.size))))) { 
                region_panic(heap, "Panic! Expression \"$i10\" is outside the bounds of the array \"$toks14\"");
            } 

            // Variable store
            (*(($result4.data) + $result_pos5)) = $char_to_token(heap, (*(($toks14.data) + $i10)));

            // Variable store
            $result_pos5 = ($result_pos5 + 1U);

            if_temp_0 = 0U;
        } 
        else {
            if_temp_0 = 0U;
        }

        if_temp_0;
        // Variable store
        $$for_counter_68 = ($$for_counter_68 + 1U);

    }

    return $result4;
}

$Token $char_to_token(void* env, trophy_int $c16) {
    Region* heap = (Region*)env;

    // If statement
    $Token if_temp_6;
    if (($c16 == 40U)) { 
        // New union literal for 'Token'
        $Token new_union_0;
        (new_union_0.tag) = 4U;
        ((new_union_0.data).open_paren) = 0U;

        if_temp_6 = new_union_0;
    } 
    else {
        // If statement
        $Token if_temp_5;
        if (($c16 == 41U)) { 
            // New union literal for 'Token'
            $Token new_union_1;
            (new_union_1.tag) = 5U;
            ((new_union_1.data).close_paren) = 0U;

            if_temp_5 = new_union_1;
        } 
        else {
            // If statement
            $Token if_temp_4;
            if (($c16 == 43U)) { 
                // New union literal for 'Token'
                $Token new_union_2;
                (new_union_2.tag) = 1U;
                ((new_union_2.data).plus) = 0U;

                if_temp_4 = new_union_2;
            } 
            else {
                // If statement
                $Token if_temp_3;
                if (($c16 == 45U)) { 
                    // New union literal for 'Token'
                    $Token new_union_3;
                    (new_union_3.tag) = 2U;
                    ((new_union_3.data).minus) = 0U;

                    if_temp_3 = new_union_3;
                } 
                else {
                    // If statement
                    $Token if_temp_2;
                    if (($c16 == 42U)) { 
                        // New union literal for 'Token'
                        $Token new_union_4;
                        (new_union_4.tag) = 3U;
                        ((new_union_4.data).multiply) = 0U;

                        if_temp_2 = new_union_4;
                    } 
                    else {
                        // If statement
                        $Token if_temp_1;
                        if ((($c16 >= 48U) & ($c16 <= 57U))) { 
                            // New union literal for 'Token'
                            $Token new_union_5;
                            (new_union_5.tag) = 6U;
                            ((new_union_5.data).int_literal) = ($c16 - 48U);

                            if_temp_1 = new_union_5;
                        } 
                        else {
                            // New union literal for 'Token'
                            $Token new_union_6;
                            (new_union_6.tag) = 0U;
                            ((new_union_6.data).eof) = 0U;

                            if_temp_1 = new_union_6;
                        }

                        if_temp_2 = if_temp_1;
                    }

                    if_temp_3 = if_temp_2;
                }

                if_temp_4 = if_temp_3;
            }

            if_temp_5 = if_temp_4;
        }

        if_temp_6 = if_temp_5;
    }

    return if_temp_6;
}

$Result $add_expr(void* env, ArrayType1 $toks29, trophy_int* $pos30) {
    Region* heap = (Region*)env;

    // Is Expression
    $Result $is_temp_0 = $mult_expr(heap, $toks29, $pos30);
    trophy_int first = 0U;
    if ((($is_temp_0.tag) == 1U)) { 
        first = ($is_temp_0.success);
    } 

    // If statement
    trophy_void if_temp_7;
    if ((1U ^ (($is_temp_0.tag) == 1U))) { 
        // New union literal for 'Result'
        $Result new_union_8;
        (new_union_8.tag) = 0U;
        ((new_union_8.data).error) = 0U;

        return new_union_8;
        if_temp_7 = 0U;
    } 
    else {
        if_temp_7 = 0U;
    }

    if_temp_7;
    // While loop
    while (1U) {
        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos30) < 0U) | ((*$pos30) >= ($toks29.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos30)\" is outside the bounds of the array \"$toks29\"");
        } 

        // Is Expression
        $Token $is_temp_1 = (*(($toks29.data) + (*$pos30)));

        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos30) < 0U) | ((*$pos30) >= ($toks29.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos30)\" is outside the bounds of the array \"$toks29\"");
        } 

        // Is Expression
        $Token $is_temp_2 = (*(($toks29.data) + (*$pos30)));

        if ((!((($is_temp_1.tag) == 1U) | (($is_temp_2.tag) == 2U)))) { 
            break;
        } 

        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos30) < 0U) | ((*$pos30) >= ($toks29.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos30)\" is outside the bounds of the array \"$toks29\"");
        } 

        // Definition of variable 'op'
        $Token $op24 = (*(($toks29.data) + (*$pos30)));

        (&$op24);
        // Variable store
        (*$pos30) = ((*$pos30) + 1U);

        // Is Expression
        $Result $is_temp_3 = $mult_expr(heap, $toks29, $pos30);
        trophy_int next = 0U;
        if ((($is_temp_3.tag) == 1U)) { 
            next = ($is_temp_3.success);
        } 

        // If statement
        trophy_void if_temp_8;
        if ((1U ^ (($is_temp_3.tag) == 1U))) { 
            // New union literal for 'Result'
            $Result new_union_9;
            (new_union_9.tag) = 0U;
            ((new_union_9.data).error) = 0U;

            return new_union_9;
            if_temp_8 = 0U;
        } 
        else {
            if_temp_8 = 0U;
        }

        if_temp_8;
        // Is Expression
        $Token $is_temp_4 = $op24;

        // If statement
        trophy_int if_temp_9;
        if ((($is_temp_4.tag) == 1U)) { 
            if_temp_9 = ($first18 + $next25);
        } 
        else {
            if_temp_9 = ($first18 - $next25);
        }

        // Variable store
        $first18 = if_temp_9;

    }

    // New union literal for 'Result'
    $Result new_union_7;
    (new_union_7.tag) = 1U;
    ((new_union_7.data).success) = $first18;

    return new_union_7;
}

$Result $mult_expr(void* env, ArrayType1 $toks40, trophy_int* $pos41) {
    Region* heap = (Region*)env;

    // Is Expression
    $Result $is_temp_5 = $atom(heap, $toks40, $pos41);
    trophy_int first = 0U;
    if ((($is_temp_5.tag) == 1U)) { 
        first = ($is_temp_5.success);
    } 

    // If statement
    trophy_void if_temp_10;
    if ((1U ^ (($is_temp_5.tag) == 1U))) { 
        // New union literal for 'Result'
        $Result new_union_11;
        (new_union_11.tag) = 0U;
        ((new_union_11.data).error) = 0U;

        return new_union_11;
        if_temp_10 = 0U;
    } 
    else {
        if_temp_10 = 0U;
    }

    if_temp_10;
    // While loop
    while (1U) {
        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos41) < 0U) | ((*$pos41) >= ($toks40.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos41)\" is outside the bounds of the array \"$toks40\"");
        } 

        // Is Expression
        $Token $is_temp_6 = (*(($toks40.data) + (*$pos41)));

        if ((!(($is_temp_6.tag) == 3U))) { 
            break;
        } 

        // Variable store
        (*$pos41) = ((*$pos41) + 1U);

        // Is Expression
        $Result $is_temp_7 = $atom(heap, $toks40, $pos41);
        trophy_int next = 0U;
        if ((($is_temp_7.tag) == 1U)) { 
            next = ($is_temp_7.success);
        } 

        // If statement
        trophy_void if_temp_11;
        if ((1U ^ (($is_temp_7.tag) == 1U))) { 
            // New union literal for 'Result'
            $Result new_union_12;
            (new_union_12.tag) = 0U;
            ((new_union_12.data).error) = 0U;

            return new_union_12;
            if_temp_11 = 0U;
        } 
        else {
            if_temp_11 = 0U;
        }

        if_temp_11;
        // Variable store
        $first32 = ($first32 * $next37);

    }

    // New union literal for 'Result'
    $Result new_union_10;
    (new_union_10.tag) = 1U;
    ((new_union_10.data).success) = $first32;

    return new_union_10;
}

$Result $atom(void* env, ArrayType1 $toks54, trophy_int* $pos55) {
    Region* heap = (Region*)env;

    // Array access bounds check
    if (HEDLEY_UNLIKELY((((*$pos55) < 0U) | ((*$pos55) >= ($toks54.size))))) { 
        region_panic(heap, "Panic! Expression \"(*$pos55)\" is outside the bounds of the array \"$toks54\"");
    } 

    // Is Expression
    $Token $is_temp_8 = (*(($toks54.data) + (*$pos55)));

    // If statement
    $Result if_temp_14;
    if ((($is_temp_8.tag) == 4U)) { 
        // Variable store
        (*$pos55) = ((*$pos55) + 1U);

        // Definition of variable 'result'
        $Result $result45 = $add_expr(heap, $toks54, $pos55);

        (&$result45);
        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos55) < 0U) | ((*$pos55) >= ($toks54.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos55)\" is outside the bounds of the array \"$toks54\"");
        } 

        // Is Expression
        $Token $is_temp_9 = (*(($toks54.data) + (*$pos55)));

        // If statement
        trophy_void if_temp_12;
        if ((1U ^ (($is_temp_9.tag) == 5U))) { 
            // New union literal for 'Result'
            $Result new_union_13;
            (new_union_13.tag) = 0U;
            ((new_union_13.data).error) = 0U;

            return new_union_13;
            if_temp_12 = 0U;
        } 
        else {
            if_temp_12 = 0U;
        }

        if_temp_12;
        // Variable store
        (*$pos55) = ((*$pos55) + 1U);

        if_temp_14 = $result45;
    } 
    else {
        // Array access bounds check
        if (HEDLEY_UNLIKELY((((*$pos55) < 0U) | ((*$pos55) >= ($toks54.size))))) { 
            region_panic(heap, "Panic! Expression \"(*$pos55)\" is outside the bounds of the array \"$toks54\"");
        } 

        // Is Expression
        $Token $is_temp_10 = (*(($toks54.data) + (*$pos55)));

        // If statement
        trophy_int if_temp_13;
        if ((($is_temp_10.tag) == 6U)) { 
            // Definition of variable 'value'
            trophy_int $value51 = 0U;

            (&$value51);
            // While loop
            while (1U) {
                // Array access bounds check
                if (HEDLEY_UNLIKELY((((*$pos55) < 0U) | ((*$pos55) >= ($toks54.size))))) { 
                    region_panic(heap, "Panic! Expression \"(*$pos55)\" is outside the bounds of the array \"$toks54\"");
                } 

                // Is Expression
                $Token $is_temp_11 = (*(($toks54.data) + (*$pos55)));
                trophy_int i = 0U;
                if ((($is_temp_11.tag) == 6U)) { 
                    i = ($is_temp_11.int_literal);
                } 

                if ((!(($is_temp_11.tag) == 6U))) { 
                    break;
                } 

                // Variable store
                $value51 = ((10U * $value51) + $i52);

                // Variable store
                (*$pos55) = ((*$pos55) + 1U);

            }

            if_temp_13 = $value51;
        } 
        else {
            if_temp_13 = 0U;
        }

        // New union literal for 'Result'
        $Result new_union_14;
        (new_union_14.tag) = 1U;
        ((new_union_14.data).success) = if_temp_13;

        if_temp_14 = new_union_14;
    }

    return if_temp_14;
}

