{	
	macro | [while do finally] [function data $: {
		[call 
			[function {
				if:   $eval:[get data while]
				then: {
					ignore | $eval:[get data do]
					[recurse]
				}
				else: $eval:[get data finally]
			}]
		]
	}]
	
	macro | [until do finally] [function data $: {
		while:   [not $eval:[get data until]]
		do:      $eval:[get data do]
		finally: $eval:[get data finally]
	}]	

	##
	macro | [list] [function data {
		
	}]
	##

	define | test : [function num {
		if: [< num 1]
		then: 0
		else: [+ num [recurse [- num 1]]]
	}]

	[test 10000]

	#define | x : 1
	
	##
	{
		while: [< x 10]
		do: [set x to [+ x 2]]
		finally: x
	}
	##
}