{>
	define: [> true = 0
	define: [> false = 0
	
	macro: [> {
		keywords = [while do finally]
		action = [> function [data]
			@: [>
				call: [>
					[> function [] {>
						if: [eval $:[get data:while]]
						then: {
							ignore: [> [eval $:[get data:do]]
							[recurse]
						}
						else: [eval $:[get data:finally]]
	}

	macro: [> {
		keywords = [until do finally]
		action = [> function [data]
			@: [> {>
				while: [not [eval $:[get data:until]]]
				do: { $:[get data:do] }
				finally: { $:[get data:finally] }
	}

	define: [> {
		fib = [function [index] {
			if: [less index 2]
			then: index
			else: [+
				[recurse [- index 1]]
				[recurse [- index 2]]
			]
		}]

		test = [function [x] {
			[function [y] [+ x y]]
		}]
	} {>
	
	define: [> x = 0

	{
		until: [greater x 10]
		do: [set x to [+ x 1]]
		finally: x
	}